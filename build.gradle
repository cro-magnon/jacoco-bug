plugins {
    id 'application'
    id "org.jetbrains.kotlin.jvm" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.kapt" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.allopen" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.serialization" version "${kotlinVersion}"
    id 'jacoco'
    id 'groovy'
    id 'maven-publish'
    id 'org.jlleitschuh.gradle.ktlint' version '10.1.0'
}

repositories {
    mavenCentral()
}

group 'com.foo.bar.jacocobug'
version '1.0'

dependencies {
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonModuleKotlinVersion"
    implementation "io.micronaut:micronaut-management:$micronautVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.2'
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation 'io.micronaut:micronaut-inject'
    implementation 'io.micronaut:micronaut-validation'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib'
    implementation 'io.micronaut.kotlin:micronaut-kotlin-runtime'
    implementation 'io.micronaut:micronaut-runtime'
    implementation 'io.micronaut:micronaut-http-server-netty'
    implementation 'io.micronaut:micronaut-http-client'
    implementation 'io.micronaut.redis:micronaut-redis-lettuce'
    implementation 'org.projectlombok:lombok:1.18.2'
    implementation 'io.micronaut.reactor:micronaut-reactor'
    implementation 'io.github.microutils:kotlin-logging:1.12.5'
    implementation "javax.inject:javax.inject:1"

    runtimeOnly 'com.fasterxml.jackson.core:jackson-annotations'
    runtimeOnly 'com.fasterxml.jackson.module:jackson-module-kotlin'

    kapt "io.micronaut:micronaut-validation:$micronautVersion"
    kapt "io.micronaut:micronaut-inject-java:$micronautVersion"

    kaptTest platform("io.micronaut:micronaut-bom:$micronautVersion")
    kaptTest "io.micronaut:micronaut-inject-java:$micronautVersion"
    kaptTest "io.micronaut:micronaut-inject-groovy:$micronautVersion"

    testImplementation 'org.objenesis:objenesis:1.2'
    testImplementation 'io.micronaut.test:micronaut-test-spock'
    testImplementation('org.spockframework:spock-core') {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
    testImplementation 'io.micronaut:micronaut-inject-groovy'
    testImplementation group: 'com.github.tomakehurst', name: 'wiremock-standalone', version: '2.27.2'

}
defaultTasks 'clean', 'build', 'jacocoTestCoverageVerification', 'jacocoTestReport'

mainClassName = 'com.foo.bar.jacocobug.ApplicationKt'

task runLocal(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = mainClassName
    jvmArgs '-Dmicronaut.environments=local'
}

test {
    useJUnitPlatform()
    systemProperty 'build_env', System.getProperty('build_env', 'local')
    finalizedBy jacocoTestCoverageVerification
}

java {
    sourceCompatibility = JavaVersion.toVersion('11')
}

allOpen {
    annotations("io.micronaut.aop.Around", "jakarta.inject.Singleton")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '11'
        javaParameters = true
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '11'
        javaParameters = true
    }
}

def jacocoExclude = [
    'com/foo/bar/jacocobug/config/RedisConfig.class',
    'com/foo/bar/jacocobug/config/ObjectCodec.class',
    'com/foo/bar/jacocobug/config/properties/RedisProperties.class'
]

jacoco { toolVersion = '0.8.7' }

jacocoTestReport {
    dependsOn 'test'
    reports {
        xml.enabled true
        html.enabled true
        html.destination file("$buildDir/reports/jacoco/")
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExclude)
        }))
    }
}

jacocoTestCoverageVerification {
    dependsOn 'test'
    violationRules {
        rule {
            limit {
                minimum = 0.99
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.50
            }
        }
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExclude)
        }))
    }
}

tasks.jacocoTestReport.dependsOn(test)
tasks.jacocoTestCoverageVerification.dependsOn(jacocoTestReport)
tasks.build.dependsOn(jacocoTestCoverageVerification)
